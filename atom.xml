<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ershaoyelxw.github.io/gridea.github.io</id>
    <title>吴先生。</title>
    <updated>2019-07-01T16:49:53.582Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ershaoyelxw.github.io/gridea.github.io"/>
    <link rel="self" href="https://ershaoyelxw.github.io/gridea.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ershaoyelxw.github.io/gridea.github.io/images/avatar.png</logo>
    <icon>https://ershaoyelxw.github.io/gridea.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 吴先生。</rights>
    <entry>
        <title type="html"><![CDATA[Nuxt.js 部署nginx服务器，静态资源加载不出来解决方法]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/nuxtjs-bu-shu-nginx-fu-wu-qi-jing-tai-zi-yuan-jia-zai-bu-chu-lai-jie-jue-fang-fa</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/nuxtjs-bu-shu-nginx-fu-wu-qi-jing-tai-zi-yuan-jia-zai-bu-chu-lai-jie-jue-fang-fa">
        </link>
        <updated>2019-07-01T16:48:28.000Z</updated>
        <content type="html"><![CDATA[<p>找到项目配置文件，注释以下内容，刷新页面就可以了。</p>
<pre><code>    #location ~ .*\.(js|css)?$
    #{
    #    expires      12h;
    #    access_log off; 
    #}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript  replace全部替换方法]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/javascript-replace</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/javascript-replace">
        </link>
        <updated>2019-06-17T10:33:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="替换第一次出现的字符串">替换第一次出现的字符串</h3>
<pre><code>var str='我是一名开发程序的程序员';
str = str.replace( '程序' , '编程' );
console.log(str);
</code></pre>
<h3 id="替换全部匹配的字符串">替换全部匹配的字符串</h3>
<pre><code>var str='我是一名开发程序的程序员';
var reg = new RegExp( '程序' , &quot;g&quot; );
str = str.replace( reg , '编程' );
console.log(str);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信小程序 scroll-view 左右无法滑动问题]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/wei-xin-xiao-cheng-xu-scroll-view-zuo-you-wu-fa-hua-dong-wen-ti</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/wei-xin-xiao-cheng-xu-scroll-view-zuo-you-wu-fa-hua-dong-wen-ti">
        </link>
        <updated>2019-05-31T13:28:06.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>scroll-view 滑动元素取消使用 <code>float: left;</code> 浮动</li>
<li>scroll-view 滑动元素添加 <code>dislay:inline-block;</code> 样式</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker 使用]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/docker-ji-ben-ming-ling</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/docker-ji-ben-ming-ling">
        </link>
        <updated>2019-05-30T10:12:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="拉取镜像">拉取镜像</h3>
<pre><code>docker pull centos
</code></pre>
<h3 id="查看镜像">查看镜像</h3>
<pre><code>docker images
</code></pre>
<h3 id="运行镜像">运行镜像</h3>
<p>bt 镜像名</p>
<pre><code>docker run -i -t -d --name bt -p 80:80 -p 8888:8888 -p 3306:3306 -v /User/mac/workspace/dockerworkspace:/www/wwwroot bt

-i: 以交互模式运行容器；
-t: 为容器重新分配一个伪输入终端；
-d: 后台运行容器，并返回容器ID；
--name=&quot;bt&quot;: 为容器指定一个名称；
-p: 端口映射，格式为：主机(宿主)端口:容器端口, 可以多次使用
-v:挂载目录   本机目录:容器目录(/Users/mac/workspace/dockerworkspace:/www/wwwroot)

docker run

</code></pre>
<h3 id="进入容器">进入容器</h3>
<pre><code># bt: 容器名称
# /bin/bash: 使用bash命令行

docker exec -it baota /bin/bash
</code></pre>
<h3 id="保存对容器的修改">保存对容器的修改</h3>
<pre><code>docker commit &lt;container_id&gt; &lt;image_name&gt;
</code></pre>
<h3 id="查看所有容器">查看所有容器</h3>
<pre><code>docker ps -a //查看所有容器
docker ps -a -q //查看所有容器ID
docker ps //查看正在运行容器
</code></pre>
<h3 id="停止运行容器">停止运行容器</h3>
<pre><code>docker stop 容器ID
docker stop $(docker ps -a -q) //停止所有容器
docker rm $(docker ps -a -a) //删除所有容器
</code></pre>
<h3 id="mac-80端口被占用">mac 80端口被占用</h3>
<h4 id="docker-error-error-starting-userland-proxy-bind-for-000080-unexpected-error">Docker Error: Error starting userland proxy: Bind for 0.0.0.0:80: unexpected error</h4>
<pre><code>sudo apachectl stop
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker 安装宝塔面板]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/docker-an-zhuang-bao-ta-mian-ban</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/docker-an-zhuang-bao-ta-mian-ban">
        </link>
        <updated>2019-05-30T10:08:41.000Z</updated>
        <content type="html"><![CDATA[<p>docker 安装宝塔面板</p>
<h3 id="docker-安装宝塔面板">docker 安装宝塔面板</h3>
<ul>
<li>把hub.docker.com上centos系统镜像拉取下来</li>
</ul>
<pre><code>docker pull centos
</code></pre>
<ul>
<li>创建自己的容器</li>
</ul>
<pre><code>docker run -i -t -d --name bt -p 80:80 -p 8888:8888 -p 3306:3306 --privileged=true -v /User/mac/workspace/dockerworkspace:/www/wwwroot centos
</code></pre>
<ul>
<li>进入容器</li>
</ul>
<p>bt: 容器名称
/bin/bash: 直接使用bash命令行</p>
<pre><code>docker exec -it bt /bin/bash
</code></pre>
<ul>
<li>bt.cn 查看安装命令</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[chrome 开发谷歌浏览器插件 引用字体包]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/chrome-kai-fa-gu-ge-liu-lan-qi-cha-jian-yin-yong-zi-ti-bao</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/chrome-kai-fa-gu-ge-liu-lan-qi-cha-jian-yin-yong-zi-ti-bao">
        </link>
        <updated>2019-05-30T01:07:38.000Z</updated>
        <content type="html"><![CDATA[<pre><code>var icons = document.createElement('style');
  icons.type = 'text/css';
  icons.textContent = '@font-face { font-family: ct-icons; src: url(&quot;' + chrome.extension.getURL('js/ct-ui/fonts/' + 'ct-icons.woff') + '&quot;),url(&quot;' +chrome.extension.getURL('js/ct-ui/fonts/' + 'ct-icons.ttf') + '&quot;);
  font-weight: 400;font-style: normal }';
  document.head.appendChild(icons);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javascript 解决XLSX读取excel文件，单元格读取时间格式后变成浮点型]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/javascript-jie-jue-xlsx-du-qu-excel-wen-jian-dan-yuan-ge-du-qu-shi-jian-ge-shi-hou-bian-cheng-fu-dian-xing</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/javascript-jie-jue-xlsx-du-qu-excel-wen-jian-dan-yuan-ge-du-qu-shi-jian-ge-shi-hou-bian-cheng-fu-dian-xing">
        </link>
        <updated>2019-05-29T12:32:06.000Z</updated>
        <content type="html"><![CDATA[<p>XLSX读取excel文件，单元格读取时间格式后变成浮点型</p>
<p>解决方法：</p>
<pre><code>var value = 42948;
var date = new Date(1900, 0, value - 1);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native开发配置]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/react-native-kai-fa-pei-zhi</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/react-native-kai-fa-pei-zhi">
        </link>
        <updated>2019-05-05T07:16:51.000Z</updated>
        <content type="html"><![CDATA[<h4 id="安卓权限配置">安卓权限配置</h4>
<ul>
<li>android/app/src/AndroidMainfest.xml</li>
</ul>
<pre><code>&lt;!--获取读写外置存储权限--&gt;
&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;
&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;
&lt;!--获取相机权限--&gt;
&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;
&lt;!--获取地址相关权限--&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;

&lt;!-- 这个权限用于进行网络定位--&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&gt;&lt;/uses-permission&gt;
&lt;!-- 这个权限用于访问GPS定位--&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;&gt;&lt;/uses-permission&gt;
&lt;!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;


&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;
&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.FLASHLIGHT&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;
</code></pre>
<h3 id="安卓键盘弹出会导致底部撑起来解决方法">安卓键盘弹出会导致底部撑起来，解决方法</h3>
<pre><code>在android &gt; app &gt; src &gt; main &gt; AndroidManifest.xml，activity中添加
</code></pre>
<pre><code>默认： android:windowSoftInputMode=&quot;adjustResize&quot;
修改： android:windowSoftInputMode=&quot;stateAlwaysHidden|adjustPan&quot;
</code></pre>
<h3 id="ios权限配置">iOS权限配置</h3>
<ul>
<li>ios调用录视频需要添加麦克风权限</li>
</ul>
<pre><code>Privacy - Microphone Usage Description  使用麦克风
Privacy - Bluetooth Peripheral Usage Description 使用蓝牙
Privacy - Camera Usage Description 获取拍照
Privacy - Location Usage Description 获取位置
Privacy - Location When In Use Usage Description 获取位置
Privacy - Photo Library Additions Usage Description 获取相册
Privacy - Photo Library Usage Description 获取相册
</code></pre>
<h4 id="微信sdk">微信SDK</h4>
<ul>
<li>ios调用微信SDK需要在info.plist添加LSApplicationQueriesSchemes</li>
</ul>
<pre><code>LSApplicationQueriesSchemes Array 
item 0   String    weixin
item 1   String    wechat
</code></pre>
<ul>
<li>xcode项目中的Info配置URL Types</li>
</ul>
<pre><code>URL Types
Identifier填写:  weixin
URL Schemes填写微信appid:  appid
上传对应weixin APP image
</code></pre>
<ul>
<li>xcode项目中的Build Phases，Link Binary With Libraries添加下面5个文件</li>
</ul>
<pre><code>libsqlite3.0.tbd
libc++.tbd
libz.tbd
CoreTelephony.framework
SystemConfiguration.framework
</code></pre>
<h4 id="react-native-http-cache-报错修改node_modules文件夹">react-native-http-cache 报错，修改node_modules文件夹</h4>
<ul>
<li>android解决方法</li>
</ul>
<pre><code> //FileCache cache1 = ImagePipelineFactory.getInstance().getMainDiskStorageCache();
FileCache cache1 = ImagePipelineFactory.getInstance().getMainFileCache();

//FileCache cache2 = ImagePipelineFactory.getInstance().getSmallImageDiskStorageCache();
FileCache cache2 = ImagePipelineFactory.getInstance().getSmallImageFileCache();
</code></pre>
<ul>
<li>iOS解决方法
打开xcode 修改RCTHttpCache.xcodeproj  &gt; RCTHttpCache  &gt; RCTHttpCache.m文件</li>
</ul>
<pre><code>#import &quot;RCTHttpCache.h&quot;
//TODO: ershaoyes
//#import &quot;RCTImageLoader.h&quot;
//#import &quot;RCTImageCache.h&quot;
//#import &quot;RCTBridge.h&quot;
</code></pre>
<h4 id="react-native-scrollable-tab-view嵌套在scrollview里ios显示正常在安卓上无法显示">react-native-scrollable-tab-view嵌套在ScrollView里IOS显示正常，在安卓上无法显示</h4>
<pre><code>Android端使用了ViewPagerAndroid，全局搜索Platform.OS === 'ios'，修改为 true
</code></pre>
<pre><code>Platform.OS === 'ios'
</code></pre>
<h4 id="react-native-baidu-map-百度地图">react-native-baidu-map 百度地图</h4>
<ul>
<li>
<p>Podfile 配置。</p>
<p>ios目录下创建Podfile文件。命令行执行pod install</p>
</li>
</ul>
<pre><code># Uncomment the next line to define a global platform for your project
# platform :ios, '9.0'

target 'rn' do
  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks
  # use_frameworks!

  # Pods for rn

  pod 'React', :path =&gt; '../node_modules/react-native', :subspecs =&gt; [
    'Core',
    'CxxBridge',
    'DevSupport', 
    'RCTText',
    'RCTNetwork',
    'RCTWebSocket', 
    'RCTAnimation'
  ]
  pod 'yoga', :path =&gt; '../node_modules/react-native/ReactCommon/yoga'
  pod 'DoubleConversion', :podspec =&gt; '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
  pod 'glog', :podspec =&gt; '../node_modules/react-native/third-party-podspecs/glog.podspec'
  pod 'Folly', :podspec =&gt; '../node_modules/react-native/third-party-podspecs/Folly.podspec'

  pod 'react-native-baidu-map', :podspec =&gt; '../node_modules/react-native-baidu-map/ios/react-native-baidu-map.podspec'

  target 'rn-tvOSTests' do
    inherit! :search_paths
    # Pods for testing
  end

  target 'rnTests' do
    inherit! :search_paths
    # Pods for testing
  end

end
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IOS ICON 工具]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/ios-icon-gong-ju</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/ios-icon-gong-ju">
        </link>
        <updated>2019-05-02T16:41:22.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p><a href="https://icon.wuruihong.com/#/ios">在线生成icon图片的工具：https://icon.wuruihong.com/#/ios</a></p>
</li>
<li>
<p>生成icon和启动图，appstore下载 Appicons and Launchimages Lite 使用。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React-Native ios打包]]></title>
        <id>https://ershaoyelxw.github.io/gridea.github.io/post/react-native-ios-da-bao</id>
        <link href="https://ershaoyelxw.github.io/gridea.github.io/post/react-native-ios-da-bao">
        </link>
        <updated>2019-04-30T01:04:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="创建证书的个人证书和公司证书">创建证书的个人证书和公司证书</h3>
<h3 id="生成bundle文件夹">生成bundle文件夹</h3>
<ul>
<li>在Xcode自己项目IOS文件夹下新建一个bundle文件夹</li>
</ul>
<ol>
<li>--entry-file  ios或者android入口的js名称，如index.js</li>
<li>--platform  平台名称(iOS、Android)</li>
<li>--dev  设置为false，将会对JavaScript代码进行优化处理。</li>
<li>--bundle-output 生成的jsbundle文件的名称，如./ios/bundle/index.jsbundle</li>
<li>--assets-dest 图片以及其他资源存放的目录，如./ios/bundle</li>
</ol>
<ul>
<li>在项目package.json文件script添加命令</li>
</ul>
<pre><code>react-native bundle --entry-file index.js --platform ios --dev false --bundle-output ./ios/bundle/index.jsbundle --assets-dest ./ios/bundle
</code></pre>
<ul>
<li>执行命令进行打包</li>
</ul>
<pre><code>npm run bundle-ios
</code></pre>
<p><strong>打包生成完成之后，在IOS目录下看到一个bundle目录，这个目录就是bundle生成的离线资源。</strong></p>
<h3 id="在xcode导入bundle文件夹">在Xcode导入bundle文件夹</h3>
<ul>
<li>使用Create folder references的方式添加文件夹.</li>
<li>在Xcode项目文件夹右键</li>
<li>Add Files to &quot;项目名&quot;</li>
<li>选择bundle文件,在option中选择Create folder references</li>
</ul>
<h3 id="设置appdelegatem">设置AppDelegate.m</h3>
<ul>
<li>使用Xcode打开项目，在AppDelegate.m文件里添加生产环境配置</li>
</ul>
<pre><code>// 测试环境：模拟器
jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];

// 生产环境：真机
jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;bundle/index&quot; withExtension:@&quot;jsbundle&quot;];
</code></pre>
<h3 id="开始打包">开始打包</h3>
<ul>
<li>Xcode &gt; Product &gt; Scheme &gt; Edit Scheme, 把项目debug状态改成release状态</li>
<li>在Xcode左上角选择 Generic iOS Device ，修改Version、Build</li>
<li>Xcode &gt; Product &gt; clean，然后选择Archice</li>
</ul>
<p><strong>生成.ipa文件方式有多种，Archice, 将成的.app文件拖到iTunes里面生成</strong></p>
]]></content>
    </entry>
</feed>